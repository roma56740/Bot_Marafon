import telebot
from telebot import types
import os
import json
import datetime
import threading
import time
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

PROGRESS_FILE = 'data/user_progress.json'

if os.path.exists(PROGRESS_FILE):
    with open(PROGRESS_FILE, 'r') as f:
        user_progress = json.load(f)
else:
    user_progress = {}

with open('data/course_days.json', 'r', encoding='utf-8') as f:
    course_days = json.load(f)

user_messages = {}

def save_progress():
    with open(PROGRESS_FILE, 'w') as f:
        json.dump(user_progress, f)

def get_next_day(user_id):
    return user_progress.get(str(user_id), 0) + 1

def schedule_daily_send():
    def run():
        while True:
            now = datetime.datetime.now()
            if now.hour == 8 and now.minute == 0:
                for user_id in user_progress:
                    next_day = get_next_day(user_id)
                    if str(next_day) in course_days:
                        send_day_content(int(user_id), next_day)
                time.sleep(60)
            time.sleep(10)
    threading.Thread(target=run, daemon=True).start()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üåø –ù–∞—á–∞—Ç—å'))

    photo_path = "audio/start.jpeg"  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å/–∏–º—è
    if os.path.exists(photo_path):
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(message.chat.id, course_days["intro"], reply_markup=markup)

    # üìé –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_path = "audio/–î–Ω–µ–≤–Ω–∏–∫.docx"
    if os.path.exists(doc_path):
        with open(doc_path, 'rb') as doc_file:
            doc_msg = bot.send_document(message.chat.id, doc_file, caption="üìù –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∫—É—Ä—Å–∞")
            try:
                bot.pin_chat_message(message.chat.id, doc_msg.message_id)
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)

    # üéß –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ-–≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    audio_intro = "audio/intro.m4a"
    if os.path.exists(audio_intro):
        warning = bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è...")
        bot.send_audio(message.chat.id, open(audio_intro, 'rb'))
        bot.delete_message(message.chat.id, warning.message_id)

@bot.message_handler(func=lambda message: message.text == 'üåø –ù–∞—á–∞—Ç—å')
def start_course(message):
    user_id = str(message.chat.id)
    current_day = user_progress.get(user_id)

    if current_day is None:
        user_progress[user_id] = 1
        save_progress()

        send_day_content(message.chat.id, 1)
    else:
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∫—É—Ä—Å. –ù–æ–≤—ã–π –¥–µ–Ω—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 8:00 –ø–æ –ú–°–ö, –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def send_help(message):
    bot.send_message(message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ—Å–Ω—ã–π –∫—É—Ä—Å.\n\n"
        "üü¢ '–ù–∞—á–∞—Ç—å' ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫—É—Ä—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.\n"
        "üìñ '–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π, –∏—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª—É—à–∞—Ç—å.\n"
        "‚úÖ '–í—ã–ø–æ–ª–Ω–∏–ª(–∞)' ‚Äî –Ω–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.\n"
        "‚ùó –î–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 8:00 –ø–æ –ú–°–ö.\n"
        "‚ùó –ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ ‚Äî –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è!\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, —è –ø–æ–º–æ–≥—É."
    )

@bot.message_handler(func=lambda message: message.text == 'üìñ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏')
def show_open_days(message):
    user_id = str(message.chat.id)
    max_day = user_progress.get(user_id, 0)
    if max_day < 1:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π. –ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ üåø '–ù–∞—á–∞—Ç—å'")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for day in range(1, max_day + 1):
        row.append(types.KeyboardButton(f"üìÖ –î–µ–Ω—å {day}"))
        if len(row) == 2:
            markup.add(*row)
            row = []
    if row:
        markup.add(*row)
    markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.startswith('üìÖ –î–µ–Ω—å'))
def view_day_content(message):
    try:
        day = int(message.text.replace('üìÖ –î–µ–Ω—å', '').strip())
        day_str = str(day)
        day_data = course_days[day_str]

        warn_msg = bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è...")

        bot.send_message(message.chat.id, f"üìÖ {day_data['title']}\n\nüëã {day_data['intro']}")
        audio_path = f"audio/{day_str}.m4a"
        if os.path.exists(audio_path):
            bot.send_audio(message.chat.id, open(audio_path, 'rb'))
        bot.delete_message(message.chat.id, warn_msg.message_id)

        bot.send_message(message.chat.id, f"üìù –ü—Ä–∞–∫—Ç–∏–∫–∞:\n{day_data['practice']}")
        bot.send_message(message.chat.id, f"üì© {day_data['closing']}")
    except:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

def send_day_content(chat_id, day):
    day_str = str(day)
    if day_str not in course_days:
        return
    day_data = course_days[day_str]

    user_progress[str(chat_id)] = day
    save_progress()

    sent = bot.send_message(chat_id, f"üìÖ {day_data['title']}\n\nüëã {day_data['intro']}")
    user_messages[chat_id] = {'text': sent.message_id}

    audio_path = f"audio/{day_str}.m4a"
    if os.path.exists(audio_path):
        warn_msg = bot.send_message(chat_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è...")
        audio_msg = bot.send_audio(chat_id, open(audio_path, 'rb'))
        bot.delete_message(chat_id, warn_msg.message_id)
        user_messages[chat_id]['audio'] = audio_msg.message_id

    practice_msg = bot.send_message(chat_id, f"üìù –ü—Ä–∞–∫—Ç–∏–∫–∞:\n{day_data['practice']}")
    user_messages[chat_id]['practice'] = practice_msg.message_id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)"))
    markup.add(types.KeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏"), types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    instruction_msg = bot.send_message(chat_id, "–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å –ø—Ä–∞–∫—Ç–∏–∫—É ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
    user_messages[chat_id]['instruction'] = instruction_msg.message_id

@bot.message_handler(func=lambda message: message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)")
def handle_day_done(message):
    user_id = str(message.chat.id)
    current_day = user_progress.get(user_id, 0)
    if current_day >= 1:
        user_progress[user_id] = current_day
        save_progress()

        # ‚ùå –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–∏–ª(–∞)" ‚Äî –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏"), types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
        bot.send_message(message.chat.id, 
                         f"üì© –î–µ–Ω—å {current_day} –≤—ã–ø–æ–ª–Ω–µ–Ω! –ï–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ üìñ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏.\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 8:00 –ø–æ –ú–°–ö.", 
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)"))
    markup.add(types.KeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏"), types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    msg = bot.send_message(message.chat.id, "üîÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é...", reply_markup=markup)

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –ø–æ—Ç–æ–∫
    def delete_msg():
        try:
            bot.delete_message(message.chat.id, msg.message_id)
        except:
            pass

    threading.Timer(3, delete_msg).start()


schedule_daily_send()
bot.polling(none_stop=True)